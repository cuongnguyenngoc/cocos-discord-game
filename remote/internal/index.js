System.register("chunks:///internal.js",["./rollupPluginModLoBabelHelpers-9a38d2ae.js","cc"],(function(){var e,t,a,i,n,o,r,s,l,d,h,p,c,g,u,m,f,S,b,_,w,P,M,R,y,v,E,C;return{setters:[function(r){e=r._,t=r.a,a=r.b,i=r.c,n=r.d,o=r.e},function(e){r=e.cclegacy,s=e.gfx,l=e._decorator,d=e.Camera,h=e.CCBoolean,p=e.CCInteger,c=e.CCFloat,g=e.Material,u=e.Texture2D,m=e.rendering,f=e.Component,S=e.geometry,b=e.renderer,_=e.assert,w=e.Layers,P=e.PipelineEventType,M=e.Vec2,R=e.Vec4,y=e.sys,v=e.pipeline,E=e.Vec3,C=e.clamp}],execute:function(){r._RF.push({},"cbf30kCUX9A3K+QpVC6wnzx","builtin-pipeline-types",void 0);var T,A,x,D,L,O,F,N,G,Q,B,H,z,I,W,k,U,V,j,X,Y,K,q,Z,J,$,ee,te,ae=s.SampleCount;function ie(){return{enabled:!1,sampleCount:ae.X4}}function ne(){return{msaa:ie(),enableShadingScale:!1,shadingScale:.5,bloom:{enabled:!1,material:null,enableAlphaMask:!1,iterations:3,threshold:.8,intensity:2.3},toneMapping:{material:null},colorGrading:{enabled:!1,material:null,contribute:1,colorGradingMap:null},fsr:{enabled:!1,material:null,sharpness:.8},fxaa:{enabled:!1,material:null}}}function oe(e){e.msaa?function(e){void 0===e.enabled&&(e.enabled=!1),void 0===e.sampleCount&&(e.sampleCount=ae.X4)}(e.msaa):e.msaa=ie(),void 0===e.enableShadingScale&&(e.enableShadingScale=!1),void 0===e.shadingScale&&(e.shadingScale=.5),e.bloom?function(e){void 0===e.enabled&&(e.enabled=!1),void 0===e.material&&(e.material=null),void 0===e.enableAlphaMask&&(e.enableAlphaMask=!1),void 0===e.iterations&&(e.iterations=3),void 0===e.threshold&&(e.threshold=.8),void 0===e.intensity&&(e.intensity=2.3)}(e.bloom):e.bloom={enabled:!1,material:null,enableAlphaMask:!1,iterations:3,threshold:.8,intensity:2.3},e.toneMapping?function(e){void 0===e.material&&(e.material=null)}(e.toneMapping):e.toneMapping={material:null},e.colorGrading?function(e){void 0===e.enabled&&(e.enabled=!1),void 0===e.material&&(e.material=null),void 0===e.contribute&&(e.contribute=1),void 0===e.colorGradingMap&&(e.colorGradingMap=null)}(e.colorGrading):e.colorGrading={enabled:!1,material:null,contribute:1,colorGradingMap:null},e.fsr?function(e){void 0===e.enabled&&(e.enabled=!1),void 0===e.material&&(e.material=null),void 0===e.sharpness&&(e.sharpness=.8)}(e.fsr):e.fsr={enabled:!1,material:null,sharpness:.8},e.fxaa?function(e){void 0===e.enabled&&(e.enabled=!1),void 0===e.material&&(e.material=null)}(e.fxaa):e.fxaa={enabled:!1,material:null}}r._RF.pop(),r._RF.push({},"de1c2EHcMhAIYRZY5nyTQHG","builtin-pipeline-settings",void 0);var re=l.ccclass,se=l.disallowMultiple,le=l.executeInEditMode,de=l.menu,he=l.property,pe=l.requireComponent;l.type,T=re("BuiltinPipelineSettings"),A=de("Rendering/BuiltinPipelineSettings"),x=pe(d),D=he(h),L=he({displayName:"Editor Preview (Experimental)",type:h}),O=he({group:{id:"MSAA",name:"Multisample Anti-Aliasing"},type:h}),F=he({group:{id:"MSAA",name:"Multisample Anti-Aliasing",style:"section"},type:p,range:[2,4,2]}),N=he({group:{id:"ShadingScale",name:"ShadingScale",style:"section"},type:h}),G=he({tooltip:"i18n:postprocess.shadingScale",group:{id:"ShadingScale",name:"ShadingScale"},type:c,range:[.01,4,.01],slide:!0}),Q=he({group:{id:"Bloom",name:"Bloom (PostProcessing)",style:"section"},type:h}),B=he({group:{id:"Bloom",name:"Bloom (PostProcessing)",style:"section"},type:g}),H=he({tooltip:"i18n:bloom.enableAlphaMask",group:{id:"Bloom",name:"Bloom (PostProcessing)",style:"section"},type:h}),z=he({tooltip:"i18n:bloom.iterations",group:{id:"Bloom",name:"Bloom (PostProcessing)",style:"section"},type:p,range:[1,6,1],slide:!0}),I=he({tooltip:"i18n:bloom.threshold",group:{id:"Bloom",name:"Bloom (PostProcessing)",style:"section"},type:c,min:0}),W=he({group:{id:"Color Grading",name:"ColorGrading (LDR) (PostProcessing)",style:"section"},type:h}),k=he({group:{id:"Color Grading",name:"ColorGrading (LDR) (PostProcessing)",style:"section"},type:g}),U=he({tooltip:"i18n:color_grading.contribute",group:{id:"Color Grading",name:"ColorGrading (LDR) (PostProcessing)",style:"section"},type:c,range:[0,1,.01],slide:!0}),V=he({tooltip:"i18n:color_grading.originalMap",group:{id:"Color Grading",name:"ColorGrading (LDR) (PostProcessing)",style:"section"},type:u}),j=he({group:{id:"FXAA",name:"Fast Approximate Anti-Aliasing (PostProcessing)",style:"section"},type:h}),X=he({group:{id:"FXAA",name:"Fast Approximate Anti-Aliasing (PostProcessing)",style:"section"},type:g}),Y=he({group:{id:"FSR",name:"FidelityFX Super Resolution",style:"section"},type:h}),K=he({group:{id:"FSR",name:"FidelityFX Super Resolution",style:"section"},type:g}),q=he({group:{id:"FSR",name:"FidelityFX Super Resolution",style:"section"},type:c,range:[0,1,.01],slide:!0}),Z=he({group:{id:"ToneMapping",name:"ToneMapping",style:"section"},type:g}),T(J=A(J=x(J=se(J=le((ee=e(($=function(e){function o(){for(var t,a=arguments.length,o=new Array(a),r=0;r<a;r++)o[r]=arguments[r];return t=e.call.apply(e,[this].concat(o))||this,i(t,"_settings",ee,n(t)),i(t,"_editorPreview",te,n(t)),t}t(o,e);var r=o.prototype;return r.getPipelineSettings=function(){return this._settings},r.onEnable=function(){oe(this._settings),this.getComponent(d).camera.pipelineSettings=this._settings},r.onDisable=function(){this.getComponent(d).camera.pipelineSettings=null},r._tryEnableEditorPreview=function(){void 0!==m&&(this._editorPreview?m.setEditorPipelineSettings(this._settings):this._disableEditorPreview())},r._disableEditorPreview=function(){void 0!==m&&(m.getEditorPipelineSettings()===this._settings&&m.setEditorPipelineSettings(null))},a(o,[{key:"editorPreview",get:function(){return this._editorPreview},set:function(e){this._editorPreview=e}},{key:"MsaaEnable",get:function(){return this._settings.msaa.enabled},set:function(e){this._settings.msaa.enabled=e}},{key:"msaaSampleCount",get:function(){return this._settings.msaa.sampleCount},set:function(e){e=Math.pow(2,Math.ceil(Math.log2(Math.max(e,2)))),e=Math.min(e,4),this._settings.msaa.sampleCount=e}},{key:"shadingScaleEnable",get:function(){return this._settings.enableShadingScale},set:function(e){this._settings.enableShadingScale=e}},{key:"shadingScale",get:function(){return this._settings.shadingScale},set:function(e){this._settings.shadingScale=e}},{key:"bloomEnable",get:function(){return this._settings.bloom.enabled},set:function(e){this._settings.bloom.enabled=e}},{key:"bloomMaterial",get:function(){return this._settings.bloom.material},set:function(e){this._settings.bloom.material!==e&&(this._settings.bloom.material=e)}},{key:"bloomEnableAlphaMask",get:function(){return this._settings.bloom.enableAlphaMask},set:function(e){this._settings.bloom.enableAlphaMask=e}},{key:"bloomIterations",get:function(){return this._settings.bloom.iterations},set:function(e){this._settings.bloom.iterations=e}},{key:"bloomThreshold",get:function(){return this._settings.bloom.threshold},set:function(e){this._settings.bloom.threshold=e}},{key:"bloomIntensity",get:function(){return this._settings.bloom.intensity},set:function(e){this._settings.bloom.intensity=e}},{key:"colorGradingEnable",get:function(){return this._settings.colorGrading.enabled},set:function(e){this._settings.colorGrading.enabled=e}},{key:"colorGradingMaterial",get:function(){return this._settings.colorGrading.material},set:function(e){this._settings.colorGrading.material!==e&&(this._settings.colorGrading.material=e)}},{key:"colorGradingContribute",get:function(){return this._settings.colorGrading.contribute},set:function(e){this._settings.colorGrading.contribute=e}},{key:"colorGradingMap",get:function(){return this._settings.colorGrading.colorGradingMap},set:function(e){this._settings.colorGrading.colorGradingMap=e}},{key:"fxaaEnable",get:function(){return this._settings.fxaa.enabled},set:function(e){this._settings.fxaa.enabled=e}},{key:"fxaaMaterial",get:function(){return this._settings.fxaa.material},set:function(e){this._settings.fxaa.material!==e&&(this._settings.fxaa.material=e)}},{key:"fsrEnable",get:function(){return this._settings.fsr.enabled},set:function(e){this._settings.fsr.enabled=e}},{key:"fsrMaterial",get:function(){return this._settings.fsr.material},set:function(e){this._settings.fsr.material!==e&&(this._settings.fsr.material=e)}},{key:"fsrSharpness",get:function(){return this._settings.fsr.sharpness},set:function(e){this._settings.fsr.sharpness=e}},{key:"toneMappingMaterial",get:function(){return this._settings.toneMapping.material},set:function(e){this._settings.toneMapping.material!==e&&(this._settings.toneMapping.material=e)}}]),o}(f)).prototype,"_settings",[he],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return ne()}}),te=e($.prototype,"_editorPreview",[D],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return!1}}),e($.prototype,"editorPreview",[L],Object.getOwnPropertyDescriptor($.prototype,"editorPreview"),$.prototype),e($.prototype,"MsaaEnable",[O],Object.getOwnPropertyDescriptor($.prototype,"MsaaEnable"),$.prototype),e($.prototype,"msaaSampleCount",[F],Object.getOwnPropertyDescriptor($.prototype,"msaaSampleCount"),$.prototype),e($.prototype,"shadingScaleEnable",[N],Object.getOwnPropertyDescriptor($.prototype,"shadingScaleEnable"),$.prototype),e($.prototype,"shadingScale",[G],Object.getOwnPropertyDescriptor($.prototype,"shadingScale"),$.prototype),e($.prototype,"bloomEnable",[Q],Object.getOwnPropertyDescriptor($.prototype,"bloomEnable"),$.prototype),e($.prototype,"bloomMaterial",[B],Object.getOwnPropertyDescriptor($.prototype,"bloomMaterial"),$.prototype),e($.prototype,"bloomEnableAlphaMask",[H],Object.getOwnPropertyDescriptor($.prototype,"bloomEnableAlphaMask"),$.prototype),e($.prototype,"bloomIterations",[z],Object.getOwnPropertyDescriptor($.prototype,"bloomIterations"),$.prototype),e($.prototype,"bloomThreshold",[I],Object.getOwnPropertyDescriptor($.prototype,"bloomThreshold"),$.prototype),e($.prototype,"colorGradingEnable",[W],Object.getOwnPropertyDescriptor($.prototype,"colorGradingEnable"),$.prototype),e($.prototype,"colorGradingMaterial",[k],Object.getOwnPropertyDescriptor($.prototype,"colorGradingMaterial"),$.prototype),e($.prototype,"colorGradingContribute",[U],Object.getOwnPropertyDescriptor($.prototype,"colorGradingContribute"),$.prototype),e($.prototype,"colorGradingMap",[V],Object.getOwnPropertyDescriptor($.prototype,"colorGradingMap"),$.prototype),e($.prototype,"fxaaEnable",[j],Object.getOwnPropertyDescriptor($.prototype,"fxaaEnable"),$.prototype),e($.prototype,"fxaaMaterial",[X],Object.getOwnPropertyDescriptor($.prototype,"fxaaMaterial"),$.prototype),e($.prototype,"fsrEnable",[Y],Object.getOwnPropertyDescriptor($.prototype,"fsrEnable"),$.prototype),e($.prototype,"fsrMaterial",[K],Object.getOwnPropertyDescriptor($.prototype,"fsrMaterial"),$.prototype),e($.prototype,"fsrSharpness",[q],Object.getOwnPropertyDescriptor($.prototype,"fsrSharpness"),$.prototype),e($.prototype,"toneMappingMaterial",[Z],Object.getOwnPropertyDescriptor($.prototype,"toneMappingMaterial"),$.prototype),J=$))||J)||J)||J)||J);r._RF.pop(),r._RF.push({},"ff9b0GZzgRM/obMbHGfCNbk","builtin-pipeline",void 0);var ce=S.AABB,ge=S.Sphere,ue=S.intersect,me=s.ClearFlagBit,fe=s.Color,Se=s.Format,be=s.FormatFeatureBit,_e=s.LoadOp,we=s.StoreOp,Pe=s.TextureType,Me=s.Viewport,Re=b.scene,ye=Re.CameraUsage,ve=Re.CSMLevel,Ee=Re.LightType;function Ce(e){return!!(e.clearFlag&(me.COLOR|me.STENCIL<<1))}function Te(e,t,a,i,n,o){e.shadowFixedArea||e.csmLevel===ve.LEVEL_1?(n.left=0,n.top=0,n.width=Math.trunc(t),n.height=Math.trunc(a)):(n.left=Math.trunc(i%2*.5*t),n.top=o>0?Math.trunc(.5*(1-Math.floor(i/2))*a):Math.trunc(.5*Math.floor(i/2)*a),n.width=Math.trunc(.5*t),n.height=Math.trunc(.5*a)),n.left=Math.max(0,n.left),n.top=Math.max(0,n.top),n.width=Math.max(1,n.width),n.height=Math.max(1,n.height)}var Ae=function(){this.isWeb=!1,this.isWebGL1=!1,this.isWebGPU=!1,this.isMobile=!1,this.isHDR=!1,this.useFloatOutput=!1,this.toneMappingType=0,this.shadowEnabled=!1,this.shadowMapFormat=Se.R32F,this.shadowMapSize=new M(1,1),this.usePlanarShadow=!1,this.screenSpaceSignY=1,this.supportDepthSample=!1,this.mobileMaxSpotLightShadowMaps=1,this.platform=new R(0,0,0,0)};function xe(e,t){var a=be.SAMPLED_TEXTURE|be.LINEAR_FILTER,i=e.device;t.isWeb=!y.isNative,t.isWebGL1=i.gfxAPI===s.API.WEBGL,t.isWebGPU=i.gfxAPI===s.API.WEBGPU,t.isMobile=y.isMobile,t.isHDR=e.pipelineSceneData.isHDR,t.useFloatOutput=e.getMacroBool("CC_USE_FLOAT_OUTPUT"),t.toneMappingType=e.pipelineSceneData.postSettings.toneMappingType;var n=e.pipelineSceneData.shadows;t.shadowEnabled=n.enabled,t.shadowMapFormat=v.supportsR32FloatTexture(e.device)?Se.R32F:Se.RGBA8,t.shadowMapSize.set(n.size),t.usePlanarShadow=n.enabled&&n.type===b.scene.ShadowType.Planar,t.screenSpaceSignY=e.device.capabilities.screenSpaceSignY,t.supportDepthSample=(e.device.getFormatFeatures(Se.DEPTH_STENCIL)&a)===a;var o=i.capabilities.screenSpaceSignY;t.platform.x=t.isMobile?1:0,t.platform.w=.5*o+.5<<1|.5*i.capabilities.clipSpaceSignY+.5}var De=ne(),Le=function(){this.settings=De,this.isMainGameWindow=!1,this.renderWindowId=0,this.colorName="",this.depthStencilName="",this.enableFullPipeline=!1,this.enableProfiler=!1,this.remainingPasses=0,this.enableShadingScale=!1,this.shadingScale=1,this.nativeWidth=1,this.nativeHeight=1,this.width=1,this.height=1,this.enableHDR=!1,this.radianceFormat=s.Format.RGBA8,this.copyAndTonemapMaterial=null,this.enableStoreSceneDepth=!1},Oe=new fe(0,0,0,0);function Fe(e,t,a,i){_(!!a.copyAndTonemapMaterial);var n=e.addRenderPass(a.nativeWidth,a.nativeHeight,"cc-tone-mapping");return n.addRenderTarget(a.colorName,_e.CLEAR,we.STORE,Oe),n.addTexture(i,"inputTexture"),n.setVec4("g_platform",t.platform),n.addQueue(m.QueueHint.OPAQUE).addFullscreenQuad(a.copyAndTonemapMaterial,1),n}function Ne(e,t,a){return e.startsWith(t)?""+t+(1-Number(e.charAt(t.length)))+"_"+a:t+"0_"+a}var Ge=function(){function e(){this.lights=[],this.shadowEnabledSpotLights=[],this._sphere=ge.create(0,0,0,1),this._boundingBox=new ce,this._rangedDirLightBoundingBox=new ce(0,0,0,.5,.5,.5)}var t=e.prototype;return t.cullLights=function(e,t,a){this.lights.length=0,this.shadowEnabledSpotLights.length=0;for(var i,n=o(e.spotLights);!(i=n()).done;){var r=i.value;r.baked||(ge.set(this._sphere,r.position.x,r.position.y,r.position.z,r.range),ue.sphereFrustum(this._sphere,t)&&(r.shadowEnabled?this.shadowEnabledSpotLights.push(r):this.lights.push(r)))}for(var s,l=o(e.sphereLights);!(s=l()).done;){var d=s.value;d.baked||(ge.set(this._sphere,d.position.x,d.position.y,d.position.z,d.range),ue.sphereFrustum(this._sphere,t)&&this.lights.push(d))}for(var h,p=o(e.pointLights);!(h=p()).done;){var c=h.value;c.baked||(ge.set(this._sphere,c.position.x,c.position.y,c.position.z,c.range),ue.sphereFrustum(this._sphere,t)&&this.lights.push(c))}for(var g,u=o(e.rangedDirLights);!(g=u()).done;){var m=g.value;ce.transform(this._boundingBox,this._rangedDirLightBoundingBox,m.node.getWorldMatrix()),ue.aabbFrustum(this._boundingBox,t)&&this.lights.push(m)}a&&this.shadowEnabledSpotLights.sort((function(e,t){return E.squaredDistance(a,e.position)-E.squaredDistance(a,t.position)}))},t._addLightQueues=function(e,t){for(var a,i=o(this.lights);!(a=i()).done;){var n=a.value,r=t.addQueue(m.QueueHint.BLEND,"forward-add");switch(n.type){case Ee.SPHERE:r.name="sphere-light";break;case Ee.SPOT:r.name="spot-light";break;case Ee.POINT:r.name="point-light";break;case Ee.RANGED_DIRECTIONAL:r.name="ranged-directional-light";break;default:r.name="unknown-light"}r.addScene(e,m.SceneFlags.BLEND,n)}},t.addSpotlightShadowPasses=function(e,t,a){for(var i,n=0,r=o(this.shadowEnabledSpotLights);!(i=r()).done;){var s=i.value,l=e.pipelineSceneData.shadows.size,d=e.addRenderPass(l.x,l.y,"default");if(d.name="SpotLightShadowPass"+n,d.addRenderTarget("SpotShadowMap"+n,_e.CLEAR,we.STORE,new fe(1,1,1,1)),d.addDepthStencil("SpotShadowDepth"+n,_e.CLEAR,we.DISCARD),d.addQueue(m.QueueHint.NONE,"shadow-caster").addScene(t,m.SceneFlags.OPAQUE|m.SceneFlags.MASK|m.SceneFlags.SHADOW_CASTER).useLightFrustum(s),++n>=a)break}},t.addLightQueues=function(e,t,a){this._addLightQueues(t,e);for(var i,n=0,r=o(this.shadowEnabledSpotLights);!(i=r()).done;){var s=i.value;if(e.addTexture("SpotShadowMap"+n,"cc_spotShadowMap"),e.addQueue(m.QueueHint.BLEND,"forward-add").addScene(t,m.SceneFlags.BLEND,s),++n>=a)break}},t.addLightPasses=function(e,t,a,i,n,r,s,l,d,h){this._addLightQueues(s,h);for(var p,c=0,g=d.pipelineSceneData.shadows.size,u=o(this.shadowEnabledSpotLights);!(p=u()).done;){var f=p.value,S=d.addRenderPass(g.x,g.y,"default");S.name="SpotlightShadowPass",S.addRenderTarget("ShadowMap"+i,_e.CLEAR,we.STORE,new fe(1,1,1,1)),S.addDepthStencil("ShadowDepth"+i,_e.CLEAR,we.DISCARD),S.addQueue(m.QueueHint.NONE,"shadow-caster").addScene(s,m.SceneFlags.OPAQUE|m.SceneFlags.MASK|m.SceneFlags.SHADOW_CASTER).useLightFrustum(f);var b=++c===this.shadowEnabledSpotLights.length?a:we.STORE;(h=d.addRenderPass(n,r,"default")).name="SpotlightWithShadowMap",h.setViewport(l),h.addRenderTarget(e,_e.LOAD),h.addDepthStencil(t,_e.LOAD,b),h.addTexture("ShadowMap"+i,"cc_spotShadowMap"),h.addQueue(m.QueueHint.BLEND,"forward-add").addScene(s,m.SceneFlags.BLEND,f)}return h},t.isMultipleLightPassesNeeded=function(){return this.shadowEnabledSpotLights.length>0},e}(),Qe=function(){function e(){this.forwardLighting=new Ge,this._viewport=new Me,this._clearColor=new fe(0,0,0,1),this._reflectionProbeClearColor=new E(0,0,0)}var t=e.prototype;return t.getConfigOrder=function(){return e.ConfigOrder},t.getRenderOrder=function(){return e.RenderOrder},t.configCamera=function(e,t,a){a.enableMainLightShadowMap=t.shadowEnabled&&!t.usePlanarShadow&&!!e.scene&&!!e.scene.mainLight&&e.scene.mainLight.shadowEnabled,a.enableMainLightPlanarShadowMap=t.shadowEnabled&&t.usePlanarShadow&&!!e.scene&&!!e.scene.mainLight&&e.scene.mainLight.shadowEnabled,a.enablePlanarReflectionProbe=a.isMainGameWindow||e.cameraUsage===ye.SCENE_VIEW,a.enableMSAA=a.settings.msaa.enabled&&!a.enableStoreSceneDepth&&!t.isWeb&&!t.isWebGL1,a.enableSingleForwardPass=t.isMobile||a.enableMSAA,++a.remainingPasses},t.windowResize=function(e,t,a,i,n,o,r){var s=m.ResourceFlags,l=m.ResourceResidency,d=i.renderWindowId,h=a.settings,p=a.enableShadingScale?Math.max(Math.floor(o*a.shadingScale),1):o,c=a.enableShadingScale?Math.max(Math.floor(r*a.shadingScale),1):r;if(a.enableMSAA&&(a.enableHDR?e.addTexture("MsaaRadiance"+d,Pe.TEX2D,a.radianceFormat,p,c,1,1,1,h.msaa.sampleCount,s.COLOR_ATTACHMENT,l.MEMORYLESS):e.addTexture("MsaaRadiance"+d,Pe.TEX2D,Se.RGBA8,p,c,1,1,1,h.msaa.sampleCount,s.COLOR_ATTACHMENT,l.MEMORYLESS),e.addTexture("MsaaDepthStencil"+d,Pe.TEX2D,Se.DEPTH_STENCIL,p,c,1,1,1,h.msaa.sampleCount,s.DEPTH_STENCIL_ATTACHMENT,l.MEMORYLESS)),e.addRenderTarget("ShadowMap"+d,t.shadowMapFormat,t.shadowMapSize.x,t.shadowMapSize.y),e.addDepthStencil("ShadowDepth"+d,Se.DEPTH_STENCIL,t.shadowMapSize.x,t.shadowMapSize.y),a.enableSingleForwardPass)for(var g=t.mobileMaxSpotLightShadowMaps,u=0;u!==g;++u)e.addRenderTarget("SpotShadowMap"+u,t.shadowMapFormat,t.shadowMapSize.x,t.shadowMapSize.y),e.addDepthStencil("SpotShadowDepth"+u,Se.DEPTH_STENCIL,t.shadowMapSize.x,t.shadowMapSize.y)},t.setup=function(e,t,a,i,n){var o=i.window.renderWindowId,r=i.scene,s=r.mainLight;--a.remainingPasses,_(a.remainingPasses>=0),this.forwardLighting.cullLights(r,i.frustum),a.enableMainLightShadowMap&&(_(!!s),this._addCascadedShadowMapPass(e,t,o,s,i)),a.enableSingleForwardPass&&this.forwardLighting.addSpotlightShadowPasses(e,i,t.mobileMaxSpotLightShadowMaps),this._tryAddReflectionProbePasses(e,a,o,s,i.scene),a.remainingPasses>0||a.enableShadingScale?(n.colorName=a.enableShadingScale?"ScaledRadiance0_"+o:"Radiance0_"+o,n.depthStencilName=a.enableShadingScale?"ScaledSceneDepth_"+o:"SceneDepth_"+o):(n.colorName=a.colorName,n.depthStencilName=a.depthStencilName);var l=this._addForwardRadiancePasses(e,t,a,o,i,a.width,a.height,s,n.colorName,n.depthStencilName,!a.enableMSAA,a.enableStoreSceneDepth?we.STORE:we.DISCARD);return a.enableStoreSceneDepth||(n.depthStencilName=""),0===a.remainingPasses&&a.enableShadingScale?Fe(e,t,a,n.colorName):l},t._addCascadedShadowMapPass=function(e,t,a,i,n){var o=m.QueueHint,r=m.SceneFlags,s=e.pipelineSceneData.shadows.size,l=s.x,d=s.y,h=this._viewport;h.left=h.top=0,h.width=l,h.height=d;var p=e.addRenderPass(l,d,"default");p.name="CascadedShadowMap",p.addRenderTarget("ShadowMap"+a,_e.CLEAR,we.STORE,new fe(1,1,1,1)),p.addDepthStencil("ShadowDepth"+a,_e.CLEAR,we.DISCARD);for(var c=e.pipelineSceneData.csmSupported?i.csmLevel:1,g=0;g!==c;++g){Te(i,l,d,g,this._viewport,t.screenSpaceSignY);var u=p.addQueue(o.NONE,"shadow-caster");t.isWebGPU||u.setViewport(this._viewport),u.addScene(n,r.OPAQUE|r.MASK|r.SHADOW_CASTER).useLightFrustum(i,g)}},t._tryAddReflectionProbePasses=function(e,t,a,i,n){var l=r.internal.reflectionProbeManager;if(l)for(var d,h=m.ResourceResidency,p=l.getProbes(),c=0,g=o(p);!(d=g()).done;){var u=d.value;if(u.needRender){var f=u.renderArea(),S=Math.max(Math.floor(f.x),1),_=Math.max(Math.floor(f.y),1);if(u.probeType===b.scene.ProbeType.PLANAR){if(!t.enablePlanarReflectionProbe)continue;var w=u.realtimePlanarTexture.window,P="PlanarProbeRT"+c,M="PlanarProbeDS"+c;e.addRenderWindow(P,t.radianceFormat,S,_,w),e.addDepthStencil(M,s.Format.DEPTH_STENCIL,S,_,h.MEMORYLESS);var R=e.addRenderPass(S,_,"default");R.name="PlanarReflectionProbe"+c,this._buildReflectionProbePass(R,t,a,u.camera,P,M,i,n)}if(4===++c)break}}},t._buildReflectionProbePass=function(e,t,a,i,n,o,r,s){void 0===s&&(s=null);var l=m.QueueHint,d=m.SceneFlags,h=t.enableMSAA?we.DISCARD:we.STORE;if(Ce(i)){this._reflectionProbeClearColor.x=i.clearColor.x,this._reflectionProbeClearColor.y=i.clearColor.y,this._reflectionProbeClearColor.z=i.clearColor.z;var p=m.packRGBE(this._reflectionProbeClearColor);this._clearColor.x=p.x,this._clearColor.y=p.y,this._clearColor.z=p.z,this._clearColor.w=p.w,e.addRenderTarget(n,_e.CLEAR,h,this._clearColor)}else e.addRenderTarget(n,_e.LOAD,h);i.clearFlag&me.DEPTH_STENCIL?e.addDepthStencil(o,_e.CLEAR,we.DISCARD,i.clearDepth,i.clearStencil,i.clearFlag&me.DEPTH_STENCIL):e.addDepthStencil(o,_e.LOAD,we.DISCARD),t.enableMainLightShadowMap&&e.addTexture("ShadowMap"+a,"cc_shadowMap"),e.addQueue(l.NONE,"reflect-map").addScene(i,d.OPAQUE|d.MASK|d.REFLECTION_PROBE,r||void 0,s||void 0)},t._addForwardRadiancePasses=function(e,t,a,i,n,o,r,s,l,d,h,p){void 0===h&&(h=!1),void 0===p&&(p=we.DISCARD);var c=m.QueueHint,g=m.SceneFlags,u=n.clearColor;this._clearColor.x=u.x,this._clearColor.y=u.y,this._clearColor.z=u.z,this._clearColor.w=u.w;var f=n.viewport;this._viewport.left=Math.round(f.x*o),this._viewport.top=Math.round(f.y*r),this._viewport.width=Math.max(Math.round(f.width*o),1),this._viewport.height=Math.max(Math.round(f.height*r),1);var S=!h&&a.enableMSAA;_(!S||a.enableSingleForwardPass);var b=a.enableSingleForwardPass?this._addForwardSingleRadiancePass(e,t,a,i,n,S,o,r,s,l,d,p):this._addForwardMultipleRadiancePasses(e,a,i,n,o,r,s,l,d,p);a.enableMainLightPlanarShadowMap&&this._addPlanarShadowQueue(n,s,b);var w=g.BLEND|(n.geometryRenderer?g.GEOMETRY:g.NONE);return b.addQueue(c.BLEND).addScene(n,w,s||void 0),b},t._addForwardSingleRadiancePass=function(e,t,a,i,n,o,r,s,l,d,h,p){var c;if(_(a.enableSingleForwardPass),o){var g="MsaaRadiance"+i,u="MsaaDepthStencil"+i,m=a.settings.msaa.sampleCount,f=e.addMultisampleRenderPass(r,s,m,0,"default");f.name="MsaaForwardPass",this._buildForwardMainLightPass(f,a,i,n,g,u,we.DISCARD,l),f.resolveRenderTarget(g,d),c=f}else(c=e.addRenderPass(r,s,"default")).name="ForwardPass",this._buildForwardMainLightPass(c,a,i,n,d,h,p,l);return _(void 0!==c),this.forwardLighting.addLightQueues(c,n,t.mobileMaxSpotLightShadowMaps),c},t._addForwardMultipleRadiancePasses=function(e,t,a,i,n,o,r,s,l,d){_(!t.enableSingleForwardPass);var h=e.addRenderPass(n,o,"default");h.name="ForwardPass";var p=this.forwardLighting.isMultipleLightPassesNeeded()?we.STORE:d;return this._buildForwardMainLightPass(h,t,a,i,s,l,p,r),h=this.forwardLighting.addLightPasses(s,l,d,a,n,o,i,this._viewport,e,h)},t._buildForwardMainLightPass=function(e,t,a,i,n,o,r,s,l){void 0===l&&(l=null);var d=m.QueueHint,h=m.SceneFlags;e.setViewport(this._viewport);var p=t.enableMSAA?we.DISCARD:we.STORE;Ce(i)?e.addRenderTarget(n,_e.CLEAR,p,this._clearColor):e.addRenderTarget(n,_e.LOAD,p),i.clearFlag&me.DEPTH_STENCIL?e.addDepthStencil(o,_e.CLEAR,r,i.clearDepth,i.clearStencil,i.clearFlag&me.DEPTH_STENCIL):e.addDepthStencil(o,_e.LOAD,r),t.enableMainLightShadowMap&&e.addTexture("ShadowMap"+a,"cc_shadowMap"),e.addQueue(d.NONE).addScene(i,h.OPAQUE|h.MASK,s||void 0,l||void 0)},t._addPlanarShadowQueue=function(e,t,a){var i=m.QueueHint,n=m.SceneFlags;a.addQueue(i.BLEND,"planar-shadow").addScene(e,n.SHADOW_CASTER|n.PLANAR_SHADOW|n.BLEND,t||void 0)},e}();Qe.ConfigOrder=100,Qe.RenderOrder=100;var Be=function(){function e(){this._clearColorTransparentBlack=new fe(0,0,0,0),this._bloomParams=new R(0,0,0,0),this._bloomTexSize=new R(0,0,0,0),this._bloomWidths=[],this._bloomHeights=[],this._bloomTexNames=[]}var t=e.prototype;return t.getConfigOrder=function(){return 0},t.getRenderOrder=function(){return 200},t.configCamera=function(e,t,a){a.enableBloom=a.settings.bloom.enabled&&!!a.settings.bloom.material,a.enableBloom&&++a.remainingPasses},t.windowResize=function(e,t,a,i){if(a.enableBloom)for(var n=i.renderWindowId,o=a.width,r=a.height,s=0;s!==a.settings.bloom.iterations+1;++s)o=Math.max(Math.floor(o/2),1),r=Math.max(Math.floor(r/2),1),e.addRenderTarget("BloomTex"+n+"_"+s,a.radianceFormat,o,r)},t.setup=function(e,t,a,i,n,o){if(!a.enableBloom)return o;--a.remainingPasses,_(a.remainingPasses>=0);var r=i.window.renderWindowId;return _(!!a.settings.bloom.material),this._addKawaseDualFilterBloomPasses(e,t,a,a.settings,a.settings.bloom.material,r,a.width,a.height,n.colorName)},t._addKawaseDualFilterBloomPasses=function(e,t,a,i,n,o,r,s,l){var d=m.QueueHint,h=i.bloom.iterations,p=h+1;this._bloomWidths.length=p,this._bloomHeights.length=p,this._bloomWidths[0]=Math.max(Math.floor(r/2),1),this._bloomHeights[0]=Math.max(Math.floor(s/2),1);for(var c=1;c!==p;++c)this._bloomWidths[c]=Math.max(Math.floor(this._bloomWidths[c-1]/2),1),this._bloomHeights[c]=Math.max(Math.floor(this._bloomHeights[c-1]/2),1);this._bloomTexNames.length=p;for(var g=0;g!==p;++g)this._bloomTexNames[g]="BloomTex"+o+"_"+g;this._bloomParams.x=t.useFloatOutput?1:0,this._bloomParams.x=0,this._bloomParams.z=i.bloom.threshold,this._bloomParams.w=i.bloom.enableAlphaMask?1:0;var u=e.addRenderPass(this._bloomWidths[0],this._bloomHeights[0],"cc-bloom-prefilter");u.addRenderTarget(this._bloomTexNames[0],_e.CLEAR,we.STORE,this._clearColorTransparentBlack),u.addTexture(l,"inputTexture"),u.setVec4("g_platform",t.platform),u.setVec4("bloomParams",this._bloomParams),u.addQueue(d.OPAQUE).addFullscreenQuad(n,0);for(var f=1;f!==p;++f){var S=e.addRenderPass(this._bloomWidths[f],this._bloomHeights[f],"cc-bloom-downsample");S.addRenderTarget(this._bloomTexNames[f],_e.CLEAR,we.STORE,this._clearColorTransparentBlack),S.addTexture(this._bloomTexNames[f-1],"bloomTexture"),this._bloomTexSize.x=this._bloomWidths[f-1],this._bloomTexSize.y=this._bloomHeights[f-1],S.setVec4("g_platform",t.platform),S.setVec4("bloomTexSize",this._bloomTexSize),S.addQueue(d.OPAQUE).addFullscreenQuad(n,1)}for(var b=h;b-- >0;){var _=e.addRenderPass(this._bloomWidths[b],this._bloomHeights[b],"cc-bloom-upsample");_.addRenderTarget(this._bloomTexNames[b],_e.CLEAR,we.STORE,this._clearColorTransparentBlack),_.addTexture(this._bloomTexNames[b+1],"bloomTexture"),this._bloomTexSize.x=this._bloomWidths[b+1],this._bloomTexSize.y=this._bloomHeights[b+1],_.setVec4("g_platform",t.platform),_.setVec4("bloomTexSize",this._bloomTexSize),_.addQueue(d.OPAQUE).addFullscreenQuad(n,2)}var w=e.addRenderPass(r,s,"cc-bloom-combine");return w.addRenderTarget(l,_e.LOAD,we.STORE),w.addTexture(this._bloomTexNames[0],"bloomTexture"),w.setVec4("g_platform",t.platform),w.setVec4("bloomParams",this._bloomParams),w.addQueue(d.BLEND).addFullscreenQuad(n,3),0===a.remainingPasses?Fe(e,t,a,l):w},e}(),He=function(){function e(){this._colorGradingTexSize=new M(0,0)}var t=e.prototype;return t.getConfigOrder=function(){return 0},t.getRenderOrder=function(){return 300},t.configCamera=function(e,t,a){var i=a.settings;a.enableColorGrading=i.colorGrading.enabled&&!!i.colorGrading.material&&!!i.colorGrading.colorGradingMap,a.enableToneMapping=a.enableHDR||a.enableColorGrading,a.enableToneMapping&&++a.remainingPasses},t.windowResize=function(e,t,a){a.enableColorGrading&&(_(!!a.settings.colorGrading.material),a.settings.colorGrading.material.setProperty("colorGradingMap",a.settings.colorGrading.colorGradingMap))},t.setup=function(e,t,a,i,n,o){if(!a.enableToneMapping)return o;if(--a.remainingPasses,_(a.remainingPasses>=0),0===a.remainingPasses)return this._addCopyAndTonemapPass(e,t,a,a.nativeWidth,a.nativeHeight,n.colorName,a.colorName);var r=a.renderWindowId,s=a.enableShadingScale?"ScaledLdrColor":"LdrColor",l=Ne(n.colorName,s,r),d=n.colorName;return n.colorName=l,this._addCopyAndTonemapPass(e,t,a,a.width,a.height,d,l)},t._addCopyAndTonemapPass=function(e,t,a,i,n,o,r){var s,l=a.settings;if(a.enableColorGrading){_(!!l.colorGrading.material),_(!!l.colorGrading.colorGradingMap);var d=l.colorGrading.colorGradingMap;this._colorGradingTexSize.x=d.width,this._colorGradingTexSize.y=d.height;var h=d.width===d.height;(s=h?e.addRenderPass(i,n,"cc-color-grading-8x8"):e.addRenderPass(i,n,"cc-color-grading-nx1")).addRenderTarget(r,_e.CLEAR,we.STORE,Oe),s.addTexture(o,"sceneColorMap"),s.setVec4("g_platform",t.platform),s.setVec2("lutTextureSize",this._colorGradingTexSize),s.setFloat("contribute",l.colorGrading.contribute),s.addQueue(m.QueueHint.OPAQUE).addFullscreenQuad(l.colorGrading.material,h?1:0)}else(s=e.addRenderPass(i,n,"cc-tone-mapping")).addRenderTarget(r,_e.CLEAR,we.STORE,Oe),s.addTexture(o,"inputTexture"),s.setVec4("g_platform",t.platform),l.toneMapping.material?s.addQueue(m.QueueHint.OPAQUE).addFullscreenQuad(l.toneMapping.material,0):(_(!!a.copyAndTonemapMaterial),s.addQueue(m.QueueHint.OPAQUE).addFullscreenQuad(a.copyAndTonemapMaterial,0));return s},e}(),ze=function(){function e(){this._fxaaParams=new R(0,0,0,0)}var t=e.prototype;return t.getConfigOrder=function(){return 0},t.getRenderOrder=function(){return 400},t.configCamera=function(e,t,a){a.enableFXAA=a.settings.fxaa.enabled&&!!a.settings.fxaa.material,a.enableFXAA&&++a.remainingPasses},t.setup=function(e,t,a,i,n,o){if(!a.enableFXAA)return o;--a.remainingPasses,_(a.remainingPasses>=0);var r=a.renderWindowId,s=a.enableShadingScale?"ScaledLdrColor":"LdrColor",l=Ne(n.colorName,s,r);if(_(!!a.settings.fxaa.material),0===a.remainingPasses)return a.enableShadingScale?(this._addFxaaPass(e,t,a.settings.fxaa.material,a.width,a.height,n.colorName,l),Fe(e,t,a,l)):(_(a.width===a.nativeWidth),_(a.height===a.nativeHeight),this._addFxaaPass(e,t,a.settings.fxaa.material,a.width,a.height,n.colorName,a.colorName));var d=n.colorName;return n.colorName=l,this._addFxaaPass(e,t,a.settings.fxaa.material,a.width,a.height,d,l)},t._addFxaaPass=function(e,t,a,i,n,o,r){this._fxaaParams.x=i,this._fxaaParams.y=n,this._fxaaParams.z=1/i,this._fxaaParams.w=1/n;var s=e.addRenderPass(i,n,"cc-fxaa");return s.addRenderTarget(r,_e.CLEAR,we.STORE,Oe),s.addTexture(o,"sceneColorMap"),s.setVec4("g_platform",t.platform),s.setVec4("texSize",this._fxaaParams),s.addQueue(m.QueueHint.OPAQUE).addFullscreenQuad(a,0),s},e}(),Ie=function(){function e(){this._fsrParams=new R(0,0,0,0),this._fsrTexSize=new R(0,0,0,0)}var t=e.prototype;return t.getConfigOrder=function(){return 0},t.getRenderOrder=function(){return 500},t.configCamera=function(e,t,a){a.enableFSR=a.settings.fsr.enabled&&!!a.settings.fsr.material&&a.enableShadingScale&&a.shadingScale<1,a.enableFSR&&++a.remainingPasses},t.setup=function(e,t,a,i,n,o){if(!a.enableFSR)return o;--a.remainingPasses;var r=n.colorName,s=0===a.remainingPasses?a.colorName:Ne(n.colorName,"UiColor",a.renderWindowId);return n.colorName=s,_(!!a.settings.fsr.material),this._addFsrPass(e,t,a,a.settings,a.settings.fsr.material,a.renderWindowId,a.width,a.height,r,a.nativeWidth,a.nativeHeight,s)},t._addFsrPass=function(e,t,a,i,n,o,r,s,l,d,h,p){this._fsrTexSize.x=r,this._fsrTexSize.y=s,this._fsrTexSize.z=d,this._fsrTexSize.w=h,this._fsrParams.x=C(1-i.fsr.sharpness,.02,.98);var c=Ne(p,"UiColor",o),g=e.addRenderPass(d,h,"cc-fsr-easu");g.addRenderTarget(c,_e.CLEAR,we.STORE,Oe),g.addTexture(l,"outputResultMap"),g.setVec4("g_platform",t.platform),g.setVec4("fsrTexSize",this._fsrTexSize),g.addQueue(m.QueueHint.OPAQUE).addFullscreenQuad(n,0);var u=e.addRenderPass(d,h,"cc-fsr-rcas");return u.addRenderTarget(p,_e.CLEAR,we.STORE,Oe),u.addTexture(c,"outputResultMap"),u.setVec4("g_platform",t.platform),u.setVec4("fsrTexSize",this._fsrTexSize),u.setVec4("fsrParams",this._fsrParams),u.addQueue(m.QueueHint.OPAQUE).addFullscreenQuad(n,1),u},e}(),We=function(){function e(){}var t=e.prototype;return t.getConfigOrder=function(){return 0},t.getRenderOrder=function(){return 1e3},t.setup=function(e,t,a,i,n,o){_(!!o);var r=m.SceneFlags.UI;return a.enableProfiler&&(r|=m.SceneFlags.PROFILER,o.showStatistics=!0),o.addQueue(m.QueueHint.BLEND,"default","default").addScene(i,r),o},e}();if(m){var ke=m.QueueHint,Ue=m.SceneFlags,Ve=function(){function e(){this._pipelineEvent=r.director.root.pipelineEvent,this._forwardPass=new Qe,this._bloomPass=new Be,this._toneMappingPass=new He,this._fxaaPass=new ze,this._fsrPass=new Ie,this._uiPass=new We,this._clearColor=new fe(0,0,0,1),this._viewport=new Me,this._configs=new Ae,this._cameraConfigs=new Le,this._copyAndTonemapMaterial=new g,this._initialized=!1,this._passBuilders=[]}var t=e.prototype;return t._setupPipelinePreview=function(e,t){if(e.cameraUsage===ye.SCENE_VIEW||e.cameraUsage===ye.PREVIEW){var a=m.getEditorPipelineSettings();t.settings=a||De}else e.pipelineSettings?t.settings=e.pipelineSettings:t.settings=De},t._preparePipelinePasses=function(e){var t=this._passBuilders;t.length=0;var a=e.settings;if(a._passes){for(var i,n=o(a._passes);!(i=n()).done;){var r=i.value;t.push(r)}_(t.length===a._passes.length)}t.push(this._forwardPass),a.bloom.enabled&&t.push(this._bloomPass),t.push(this._toneMappingPass),a.fxaa.enabled&&t.push(this._fxaaPass),a.fsr.enabled&&t.push(this._fsrPass),t.push(this._uiPass)},t._setupBuiltinCameraConfigs=function(e,t,a){var i=e.window,n=e.cameraUsage===ye.GAME&&!!i.swapchain;a.isMainGameWindow=n,a.renderWindowId=i.renderWindowId,a.colorName=i.colorName,a.depthStencilName=i.depthStencilName,a.enableFullPipeline=0!=(e.visibility&w.Enum.DEFAULT),a.enableProfiler=false,a.remainingPasses=0,a.shadingScale=a.settings.shadingScale,a.enableShadingScale=a.settings.enableShadingScale&&1!==a.shadingScale,a.nativeWidth=Math.max(Math.floor(i.width),1),a.nativeHeight=Math.max(Math.floor(i.height),1),a.width=a.enableShadingScale?Math.max(Math.floor(a.nativeWidth*a.shadingScale),1):a.nativeWidth,a.height=a.enableShadingScale?Math.max(Math.floor(a.nativeHeight*a.shadingScale),1):a.nativeHeight,a.enableHDR=a.enableFullPipeline&&t.useFloatOutput,a.radianceFormat=a.enableHDR?s.Format.RGBA16F:s.Format.RGBA8,a.copyAndTonemapMaterial=this._copyAndTonemapMaterial,a.enableStoreSceneDepth=!1},t._setupCameraConfigs=function(e,t,a){this._setupPipelinePreview(e,a),this._preparePipelinePasses(a),this._passBuilders.sort((function(e,t){return e.getConfigOrder()-t.getConfigOrder()})),this._setupBuiltinCameraConfigs(e,t,a);for(var i,n=o(this._passBuilders);!(i=n()).done;){var r=i.value;r.configCamera&&r.configCamera(e,t,a)}},t.windowResize=function(e,t,a,i,n){xe(e,this._configs),this._setupCameraConfigs(a,this._configs,this._cameraConfigs);var r=t.renderWindowId;e.addRenderWindow(this._cameraConfigs.colorName,Se.RGBA8,i,n,t,this._cameraConfigs.depthStencilName);var s=this._cameraConfigs.width,l=this._cameraConfigs.height;this._cameraConfigs.enableShadingScale?(e.addDepthStencil("ScaledSceneDepth_"+r,Se.DEPTH_STENCIL,s,l),e.addRenderTarget("ScaledRadiance0_"+r,this._cameraConfigs.radianceFormat,s,l),e.addRenderTarget("ScaledRadiance1_"+r,this._cameraConfigs.radianceFormat,s,l),e.addRenderTarget("ScaledLdrColor0_"+r,Se.RGBA8,s,l),e.addRenderTarget("ScaledLdrColor1_"+r,Se.RGBA8,s,l)):(e.addDepthStencil("SceneDepth_"+r,Se.DEPTH_STENCIL,s,l),e.addRenderTarget("Radiance0_"+r,this._cameraConfigs.radianceFormat,s,l),e.addRenderTarget("Radiance1_"+r,this._cameraConfigs.radianceFormat,s,l),e.addRenderTarget("LdrColor0_"+r,Se.RGBA8,s,l),e.addRenderTarget("LdrColor1_"+r,Se.RGBA8,s,l)),e.addRenderTarget("UiColor0_"+r,Se.RGBA8,i,n),e.addRenderTarget("UiColor1_"+r,Se.RGBA8,i,n);for(var d,h=o(this._passBuilders);!(d=h()).done;){var p=d.value;p.windowResize&&p.windowResize(e,this._configs,this._cameraConfigs,t,a,i,n)}},t.setup=function(e,t){if(!this._initMaterials(t))for(var a,i=o(e);!(a=i()).done;){var n=a.value;n.scene&&n.window&&(this._setupCameraConfigs(n,this._configs,this._cameraConfigs),this._pipelineEvent.emit(P.RENDER_CAMERA_BEGIN,n),this._cameraConfigs.enableFullPipeline?this._buildForwardPipeline(t,n,n.scene,this._passBuilders):this._buildSimplePipeline(t,n),this._pipelineEvent.emit(P.RENDER_CAMERA_END,n))}},t._buildSimplePipeline=function(e,t){var a=Math.max(Math.floor(t.window.width),1),i=Math.max(Math.floor(t.window.height),1),n=this._cameraConfigs.colorName,o=this._cameraConfigs.depthStencilName,r=t.viewport;this._viewport.left=Math.round(r.x*a),this._viewport.top=Math.round(r.y*i),this._viewport.width=Math.max(Math.round(r.width*a),1),this._viewport.height=Math.max(Math.round(r.height*i),1);var s=t.clearColor;this._clearColor.x=s.x,this._clearColor.y=s.y,this._clearColor.z=s.z,this._clearColor.w=s.w;var l=e.addRenderPass(a,i,"default");Ce(t)?l.addRenderTarget(n,_e.CLEAR,we.STORE,this._clearColor):l.addRenderTarget(n,_e.LOAD,we.STORE),t.clearFlag&me.DEPTH_STENCIL?l.addDepthStencil(o,_e.CLEAR,we.DISCARD,t.clearDepth,t.clearStencil,t.clearFlag&me.DEPTH_STENCIL):l.addDepthStencil(o,_e.LOAD,we.DISCARD),l.setViewport(this._viewport),l.addQueue(ke.OPAQUE).addScene(t,Ue.OPAQUE);var d=Ue.BLEND|Ue.UI;this._cameraConfigs.enableProfiler&&(d|=Ue.PROFILER,l.showStatistics=!0),l.addQueue(ke.BLEND).addScene(t,d)},t._buildForwardPipeline=function(e,t,a,i){!function(e){e.sort((function(e,t){return e.getRenderOrder()-t.getRenderOrder()}))}(i);for(var n,r={colorName:"",depthStencilName:""},s=void 0,l=o(i);!(n=l()).done;){var d=n.value;d.setup&&(s=d.setup(e,this._configs,this._cameraConfigs,t,r,s))}_(0===this._cameraConfigs.remainingPasses)},t._initMaterials=function(e){return this._initialized?0:(xe(e,this._configs),this._copyAndTonemapMaterial._uuid="builtin-pipeline-tone-mapping-material",this._copyAndTonemapMaterial.initialize({effectName:"pipeline/post-process/tone-mapping"}),this._copyAndTonemapMaterial.effectAsset&&(this._initialized=!0),this._initialized?0:1)},e}();m.setCustomPipeline("Builtin",new Ve)}r._RF.pop()}}}));

(function(r) {
  r('virtual:///prerequisite-imports/internal', 'chunks:///internal.js'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,